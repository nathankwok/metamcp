# Backend-only Dockerfile
# Use the official uv image as base with explicit platform for Cloud Run compatibility
FROM --platform=linux/amd64 ghcr.io/astral-sh/uv:debian AS base

# Install Node.js and pnpm directly
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    && curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g pnpm@10.12.0 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install dependencies only when needed
FROM base AS deps
WORKDIR /app

ENV NEXT_TELEMETRY_DISABLED 1

# Copy root package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY turbo.json ./

# Copy package.json files from all workspaces
COPY apps/frontend/package.json ./apps/frontend/
COPY apps/backend/package.json ./apps/backend/
COPY packages/eslint-config/package.json ./packages/eslint-config/
COPY packages/trpc/package.json ./packages/trpc/
COPY packages/typescript-config/package.json ./packages/typescript-config/
COPY packages/zod-types/package.json ./packages/zod-types/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Builder stage
FROM base AS builder
WORKDIR /app

# Copy node_modules from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/apps/frontend/node_modules ./apps/frontend/node_modules
COPY --from=deps /app/apps/backend/node_modules ./apps/backend/node_modules
COPY --from=deps /app/packages ./packages

# Copy source code
COPY . .

# Build only backend and required packages (avoid frontend build that causes QEMU issues)
RUN pnpm run build --filter=@repo/zod-types --filter=@repo/trpc --filter=backend

# Production runner stage
FROM base AS runner
WORKDIR /app

ENV APP_URL=https://metamcp-frontend-555166161772.us-central1.run.app

# OCI image labels
LABEL org.opencontainers.image.source="https://github.com/metatool-ai/metamcp"
LABEL org.opencontainers.image.description="MetaMCP Backend - aggregates MCP servers into a unified MetaMCP"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.title="MetaMCP Backend"
LABEL org.opencontainers.image.vendor="metatool-ai"

# Install curl for health checks and postgresql-client for migrations
RUN apt-get update && apt-get install -y curl postgresql-client && apt-get clean && rm -rf /var/lib/apt/lists/*

# Create non-root user with proper home directory
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 --home /home/nextjs nextjs && \
    mkdir -p /home/nextjs/.cache/node/corepack && \
    chown -R nextjs:nodejs /home/nextjs

# Copy built backend application
COPY --from=builder --chown=nextjs:nodejs /app/apps/backend/dist ./apps/backend/dist
COPY --from=builder --chown=nextjs:nodejs /app/apps/backend/package.json ./apps/backend/
COPY --from=builder --chown=nextjs:nodejs /app/apps/backend/drizzle ./apps/backend/drizzle
COPY --from=builder --chown=nextjs:nodejs /app/apps/backend/drizzle.config.ts ./apps/backend/

# Copy built packages
COPY --from=builder --chown=nextjs:nodejs /app/packages ./packages
COPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./
COPY --from=builder --chown=nextjs:nodejs /app/pnpm-workspace.yaml ./

# Install production dependencies only
RUN pnpm install --prod

# Install drizzle-kit locally in backend for migrations
RUN cd apps/backend && pnpm add drizzle-kit@0.31.1



## From old Dockerfile.backend
## Ensure we're running as root for system installations
#USER root
#
## Cloud Run environment setup
#ENV PORT=12009
#ENV NODE_ENV=production
#
## Create a non-root user if not exists
#RUN id -u nextjs &>/dev/null || useradd -r -d /app -s /bin/bash nextjs
#
## Install additional dependencies for MCP server management
#RUN apt-get update && apt-get install -y \
#    curl \
#    wget \
#    python3 \
#    python3-pip \
#    && rm -rf /var/lib/apt/lists/*
#
#
## Old dockerfile references old backend-entrypoint.sh
## Copy Cloud Run specific entrypoint script
#COPY microservices_deploy/backend-entrypoint.sh /app/apps/backend
#RUN chmod +x /app/apps/backend/backend-entrypoint-2.sh



# from 2
# Copy backend entrypoint script
COPY --chown=nextjs:nodejs microservices_deploy/backend-entrypoint-2.sh /app/apps/backend
RUN chmod +x /app/apps/backend/backend-entrypoint-2.sh


USER nextjs

# Expose backend port
EXPOSE 12009

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:12009/health || exit 1

WORKDIR /app/apps/backend

## Start backend server
#CMD ["node", "dist/index.js"]

#WORKDIR /app/apps/backend
CMD ["./backend-entrypoint-2.sh"]

# From 2
# Use backend entrypoint script
#CMD ["./backend-entrypoint.sh"]